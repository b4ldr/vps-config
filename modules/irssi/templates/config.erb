<%-
def bool2yesno(value)
  if value.is_a?(TrueClass)
    'yes'
  else
    'no'
  end
end
-%>
servers = (
<%- @servers.each_pair do |chatnet, config| -%>
  {
    chatnet = "<%= chatnet %>";
    address = "<%= config['address'] %>";
    port = "<%= config.fetch('port', '6697') %>";
    use_tls = "<%= bool2yesno(config.fetch('use_tls', true)) %>";
    tls_verify = "<%= bool2yesno(config.fetch('tls_verify', true)) %>";
    autoconnect = "<%= bool2yesno(config.fetch('autoconnect', true)) %>";
  <%- if config.include?('password') -%>
    password = "<%= config['password'] %>";
  <%- end -%>
  },
<%- end -%>
);
chatnets = {
<%- @servers.each_pair do |chatnet, config| -%>
  <%= chatnet %> = {
    type = "IRC";
    max_kicks = "<%= config.fetch('kicks', 4) %>";
    max_query_chans = "<%= config.fetch('querychans', 5) %>";
    max_msgs = "<%= config.fetch('kicks', 5) %>";
    max_whois = "<%= config.fetch('whois', 4) %>";
    <%- if config.has_key?('username') -%>
    username = "<%= config['username'] %>";
    <%- end -%>
    <%- if config.has_key?('sasl_mechanism') -%>
    sasl_mechanism = "<%= config['sasl_mechanism'] %>";
    <%- end -%>
    <%- if config.has_key?('sasl_username') -%>
    sasl_username = "<%= config['sasl_username'] %>";
    <%- end -%>
    <%- if config.has_key?('sasl_password') -%>
    sasl_password = "<%= config['sasl_password'] %>";
    <%- end -%>
  };
<%- end -%>
};
channels = (
<%- @servers.each_pair do |chatnet, config| -%>
  <%- config.fetch('channels', {}).each_pair do |channel, chan_config| -%>
  { chatnet = "<%= chatnet %>"; name = "<%= channel %>"; autojoin = "<%= bool2yesno(chan_config.fetch('autojoin', true)) %>"; },
  <%- end -%>
<%- end -%>
);
aliases = {
<%- @aliases.each_pair do |name, action| -%>
  <%= name.upcase %> = "<%= action %>";
<%- end -%>
};
settings = {
  core = {
    real_name = "<%= @real_name %>";
    user_name = "<%= @user_name %>";
    nick = "<%= @nick %>";
    settings_autosave = "OFF";
    recode_autodetect_utf8 = "<%= bool2yesno(@recode_autodetect_utf8) %>";
    recode = "<%= bool2yesno(@recode) %>";
    recode_fallback = "<%= @recode_fallback %>";
    recode_out_default_charset = "<%= bool2yesno(@recode_out_default_charset) %>";
  };
  "fe-text" = {
    actlist_sort = "refnum";
  };
  "fe-common/core" = {
    theme = "<%= @theme %>";
    term_charset = "<%= @term_charset %>";
    autolog = "<%= bool2yesno(@autolog) %>";
    autolog_path = "<%= @autolog_level %>";
<%- unless @autolog_level.empty? -%>
    autolog_level = "<%= @autolog_level.join(' ') %>"
<%- end -%>
  };
  "perl/core/scripts" = {
<%- @perl_script_config.each_pair do |config, setting| -%>
    <%= config %> = "<%= setting %>";
<%- end -%>
  };
};
ignores = (
<%- @ignores.each do |ignore| -%>
  {
  <%- if ignore.has_key?('level') -%>
    level = "<%= ignore['level'].join(' ') %>";
  <%- end -%>
  <%- if ignore.has_key?('mask') -%>
    mask = "<%= ignore['mask'] %>";
  <%- end -%>
  <%- if ignore.has_key?('pattern') -%>
    pattern = "<%= ignore['pattern'] %>";
  <%- end -%>
  <%- if ignore.has_key?('exception') -%>
    exception = "<%= bool2yesno(ignore['exception']) %>";
  <%- end -%>
  <%- if ignore.has_key?('regexp') -%>
    regexp = "<%= bool2yesno(ignore['regexp']) %>";
  <%- end -%>
  },
<%- end -%>
);
hilights = (
<%- @hilights.each_pair do |name, hilight| -%>
  {
    text = "<%= name %>";
    nick = "<%= bool2yesno(hilight['nick']) %>";
    word = "<%= bool2yesno(hilight['word']) %>";
  <%- if hilight.has_key?('servertag') -%>
    servertag = "<%= hilight['servertag'] %>";
  <%- end -%>
  <%- if hilight.has_key?('color') -%>
    color = "<%= hilight['color'] %>";
  <%- end -%>
  <%- if hilight.has_key?('matchcase') -%>
    regexp = "<%= bool2yesno(hilight['matchcase']) %>";
  <%- end -%>
  <%- if hilight.has_key?('channels') -%>
    channels = (
    <%- hilight['channels'].each do |channel| -%>
      "<%= channel %>",
    <%- end -%>
    );
  <%- end -%>
  },
<%- end -%>
);
<%-# TODO: template this -%>
statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$tag/$itemname{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://www.irssi.org";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};
